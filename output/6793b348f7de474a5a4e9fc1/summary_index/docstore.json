{"docstore/data": {"cb232526-8b58-49a2-9650-6d431924cd70": {"__data__": {"id_": "cb232526-8b58-49a2-9650-6d431924cd70", "embedding": null, "metadata": {"page_num": 1, "image_path": "output/6793b348f7de474a5a4e9fc1/extracted_images/5187e41c-8ec5-4031-9973-db673c2a3719-img_p1_1.png", "parsed_text_markdown": "                What is Retrieval-Augmented Generation (RAG)?\nAuthor: Shumin Zhang\n\nWhat is Retrieval-Augmented Generation?\nRetrieval-Augmented Generation (RAG) is the process of enhancing the reference data used by\nlanguage models (LLMs) through integrating them with traditional information retrieval systems.\nThis hybrid approach allows LLMs to access and utilize external knowledge bases, databases,\nand other authoritative sources of information, thereby improving the accuracy, relevance, and\ncurrency of the generated responses without requiring extensive retraining. Without RAG, LLMs\ngenerate responses based on the information they were trained on. With RAG, the response\ngeneration process is enriched by integrating external information into the generation.\n\nHow does Retrieval-Augmented Generation work?\nRetrieval-Augmented Generation works through bringing multiple systems or services to\ngenerate the prompt to the LLM. This means there will be required setup to support the different\nsystems and services to feed the appropriate data for a RAG workflow. This involves several\nkey steps:\n\n     1.   External Data Source Creation:\n\nExternal data refers to information outside the original training data of the LLM. This data can\ncome from a variety of sources such as APIs, databases, document repositories, and web\npages. The data is pre-processed and converted into numerical representations (embeddings)\nusing embedding models, and then stored in a searchable vector database along with reference\nto the data that was used to generate the embedding. This forms a knowledge library that can\nbe used to augment a prompt when calling into the LLM for generation of a response to a given\ninput.\n\n     2.   Retrieval of Relevant Information:\n\nWhen a user inputs a query, it is embedded into a vector representation and matched against\nthe entries in the vector database. The vector database retrieves the most relevant documents\nor data based on semantic similarity. For example, a query about company leave policies would\nretrieve both the general leave policy document and the specific role leave policies."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "39a92e39-e1c9-4325-bbbd-953529704e3a": {"__data__": {"id_": "39a92e39-e1c9-4325-bbbd-953529704e3a", "embedding": null, "metadata": {"page_num": 2, "image_path": "output/6793b348f7de474a5a4e9fc1/extracted_images/bec87c93-d94c-4c79-bebd-cda1b88e2210-img_p1_1.png", "parsed_text_markdown": "     3.   Augmentation of LLM Prompt:\n\nThe retrieved information is then integrated into the prompt to send to the LLM using prompt\nengineering techniques. This fully formed prompt is sent to the LLM, providing additional context\nand relevant data that enables the model to generate more accurate and contextually\nappropriate responses.\n\n     4.   Generation of Response:\n\nThe LLM processes the augmented prompt and generates a response that is coherent,\ncontextually appropriate, and enriched with accurate, up-to-date information.\n\nThe following diagram illustrates the flow of data when using RAG with LLMs.\n                                                                            Embedding Models        (\n                                                 knowledge libraries\n                          2\n                                                           Contexts\n                                  Query Vector                                        3                          3\n                                                                                            Query + Contexts\n                                Embedding Models\n                                                                                               Augmented Prompt\n                            Query-\n                                                                              Response               LLMs\nWhy use Retrieval-Augmented Generation?\nRAG addresses several inherent challenges of using LLMs by leveraging external data sources:\n\n     1.   Enhanced Accuracy and Relevance:\n\nBy accessing up-to-date and authoritative information, RAG ensures that the generated\nresponses are accurate, specific, and relevant to the user's query. This is particularly important"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}, "b2ca3d12-027b-40ae-b45e-8e140ab9d886": {"__data__": {"id_": "b2ca3d12-027b-40ae-b45e-8e140ab9d886", "embedding": null, "metadata": {"page_num": 3, "image_path": "output/6793b348f7de474a5a4e9fc1/extracted_images/edbd09b7-7175-4b3c-a325-bbf8f6b7d583-img_p0_1.png", "parsed_text_markdown": "for applications requiring precise and current information, such as specific company details,\nrelease dates and release items, new features available for a product, individual product details,\netc..\n\n     2.  Cost-Effective Implementation:\n\nRAG enables organizations to enhance the performance of LLMs without the need for\nexpensive and time-consuming fine-tuning or custom model training. By incorporating external\nknowledge libraries, RAG provides a more efficient way to update and expand the model's basis\nof knowledge.\n\n     3.  Improved User Trust:\n\nWith RAG, responses can include citations or references to the original sources of information,\nincreasing transparency and trust. Users can verify the source of the information, which\nenhances the credibility and trust of an AI system.\n\n     4.  Greater Developer Control:\n\nDevelopers can easily update and manage the external knowledge sources used by the LLM,\nallowing for flexible adaptation to changing requirements or specific domain needs. This control\nincludes the ability to restrict sensitive information retrieval and ensure the correctness of\ngenerated responses. Doing this in conjunction with an evaluation framework (link to evaluation\npipeline article) can help to roll out newer content more rapidly to downstream consumers.\n\nSnaplogic GenAI App Builder: Building RAG with Ease\nSnaplogic GenAI App Builder empowers business users to create large language model (LLM)\npowered solutions without requiring any coding skills. This tool provides the fastest path to\ndeveloping generative enterprise applications by leveraging services from industry leaders such\nas OpenAI, Azure OpenAI, Amazon Bedrock, Anthropic Claude on AWS, and Google Gemini.\nUsers can effortlessly create LLM applications and workflows using this robust platform.\n\nWith Snaplogic GenAI App Builder, you can construct both an indexing pipeline and a\nRetrieval-Augmented Generation (RAG) pipeline with minimal effort."}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {}, "metadata_template": "{key}: {value}", "metadata_separator": "\n", "text": "", "mimetype": "text/plain", "start_char_idx": null, "end_char_idx": null, "metadata_seperator": "\n", "text_template": "{metadata_str}\n\n{content}", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"cb232526-8b58-49a2-9650-6d431924cd70": {"doc_hash": "ba563ba0bbee0f0a6641515602d962afe1d7428c4bad6e2cb853da15df0a06c0"}, "39a92e39-e1c9-4325-bbbd-953529704e3a": {"doc_hash": "5ba616b4e7eb619291a887add931d92483cb8320ea9253af7f7223e6007546fe"}, "b2ca3d12-027b-40ae-b45e-8e140ab9d886": {"doc_hash": "d35bfb8476164a5209e3754dbdba194a7c6b4f743f5461f9a84d55b93e216061"}}}